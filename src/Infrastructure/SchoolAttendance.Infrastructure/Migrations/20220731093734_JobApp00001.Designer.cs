// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolAttendance.Infrastructure.Data;

#nullable disable

namespace SchoolAttendance.Infrastructure.Migrations
{
    [DbContext(typeof(SchoolAttendanceContext))]
    [Migration("20220731093734_JobApp00001")]
    partial class JobApp00001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AcademicYear", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("IsCurrentYear")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AcademicYear", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AcademicYearId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<int?>("AssessmentTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CompletedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("GradeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("PublishedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("Statue")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("VersionNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("AssessmentTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GradeId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Assessment", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentClass", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishedOn")
                        .HasColumnType("datetime");

                    b.HasKey("ClassId", "AssessmentId");

                    b.HasIndex("AssessmentId");

                    b.ToTable("AssessmentClass", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentClassStudent", b =>
                {
                    b.Property<int>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("ConnectedBrowser")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ConnectedIp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ConnectedIP");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(6,2)");

                    b.Property<decimal?>("ScorePrecentaged")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime?>("StartedOn")
                        .HasColumnType("datetime");

                    b.HasKey("AssessmentId", "StudentId", "ClassId");

                    b.HasIndex("ClassId");

                    b.HasIndex("StudentId");

                    b.ToTable("AssessmentClassStudent", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentMcqquestionStudentAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssessmentSectionStudentQuestionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSelectionCorrect")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("SubmittedOn")
                        .HasColumnType("datetime");

                    b.Property<int>("TeacherAnswerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentSectionStudentQuestionId");

                    b.HasIndex("TeacherAnswerId");

                    b.ToTable("AssessmentMCQQuestionStudentAnswer", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentOpenEndedQuestionStudentAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AnswerTextRt")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("AnswerTextRT");

                    b.Property<int>("AssessmentSectionStudentQuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SubmittedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("TeacherComment")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentSectionStudentQuestionId");

                    b.ToTable("AssessmentOpenEndedQuestionStudentAnswer", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<int>("ContentType")
                        .HasColumnType("int");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("SectionContent")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.ToTable("AssessmentSection", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentSectionQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssessementSectionId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Score")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssessementSectionId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AssessmentSectionQuestion", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentSectionStudentQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AssessmentSectionQuestionId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentSectionQuestionId");

                    b.HasIndex("StudentId");

                    b.ToTable("AssessmentSectionStudentQuestion", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentStructuredQuestionStudentAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AnswerTextRt")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("AnswerTextRT");

                    b.Property<int>("AssessmentSectionStudentQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("StructuredQuestionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentSectionStudentQuestionId");

                    b.HasIndex("StructuredQuestionId");

                    b.ToTable("AssessmentStructuredQuestionStudentAnswer", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("AssessmentType", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AcademicYear")
                        .HasColumnType("int");

                    b.Property<int>("ClassTeacherId")
                        .HasColumnType("int");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYear");

                    b.HasIndex("ClassTeacherId");

                    b.HasIndex("GradeId");

                    b.ToTable("Class", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.ClassSubject", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("SubjectTeacherId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("ClassId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("SubjectTeacherId");

                    b.ToTable("ClassSubject", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.ClassSubjectStudent", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeAllocatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ClassId", "SubjectId", "StudentId");

                    b.ToTable("ClassSubjectStudent", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.ClassSubjectTimeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("DayId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("DayId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ClassSubjectTimeTable", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Day", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LevelHeadId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("LevelHeadId");

                    b.ToTable("Grade", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.GradeSubject", b =>
                {
                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("SubjectId", "GradeId");

                    b.HasIndex("GradeId");

                    b.ToTable("GradeSubject", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<string>("CompetencyLevel")
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Duration")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int?>("GradeId")
                        .HasColumnType("int");

                    b.Property<bool>("HasLessonTest")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LessonIntroduction")
                        .HasColumnType("longtext");

                    b.Property<int>("LessonOwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("TeachingAids")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TeachingProcess")
                        .HasColumnType("longtext");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GradeId");

                    b.HasIndex("LessonOwnerId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Lesson", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonAssignedClass", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PublishedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("StartedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ClassId", "LessonId");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonAssignedClass", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClosingDateTime")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .IsFixedLength();

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonAssignment", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonAssignmentStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LessonAssignmentId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(6,2)");

                    b.Property<string>("StudentBrowser")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("StudentIp")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("StudentIP");

                    b.Property<string>("StudentRemarks")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("SubmittedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("TeacherComment")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LessonAssignmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("LessonAssignmentStudent", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonAssignmentStudentUpload", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LessonAssignmentStudentId")
                        .HasColumnType("int");

                    b.Property<string>("UploadFilePath")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UploadedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("LessonAssignmentStudentId");

                    b.ToTable("LessonAssignmentStudentUpload", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonLearningOutcome", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LearningOutcome")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonLearningOutcome", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonLecture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("LectureContent")
                        .HasColumnType("longtext");

                    b.Property<int?>("LectureContentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Mimetype")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("MIMEType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("TopicId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LectureContentTypeId");

                    b.HasIndex("TopicId");

                    b.ToTable("LessonLecture", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonLectureContentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("IconPath")
                        .HasColumnType("longtext");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.ToTable("LessonLectureContentType", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonPrerequisite", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Prerequisite")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonPrerequisites");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonTopic", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonUnitTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("StudentGuide")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonUnitTest", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonUnitTestTopic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Instruction")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("LessonUnitTestId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonUnitTestId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("LessonUnitTestTopic", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonUnitTestTopicQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("LessonUnitTestTopicId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonUnitTestTopicId");

                    b.HasIndex("QuestionId");

                    b.ToTable("LessonUnitTestTopicQuestion", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonUnitTestTopicStudentMcqquestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSelectionCorrect")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LessonUnitTestTopicStudentQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherAnswerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonUnitTestTopicStudentQuestionId");

                    b.HasIndex("TeacherAnswerId");

                    b.ToTable("LessonUnitTestTopicStudentMCQQuestionAnswer", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonUnitTestTopicStudentOpenEndedQuestionAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Answer")
                        .HasColumnType("longtext");

                    b.Property<string>("AnswerRt")
                        .HasColumnType("longtext")
                        .HasColumnName("AnswerRT");

                    b.Property<int>("LessonUnitTestTopicStudentQuestionId")
                        .HasColumnType("int");

                    b.Property<string>("TeacherComment")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LessonUnitTestTopicStudentQuestionId");

                    b.ToTable("LessonUnitTestTopicStudentOpenEndedQuestionAnswer", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonUnitTestTopicStudentQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("IsCorrect")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LessonUnitTestTopicQuestionId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Score")
                        .HasColumnType("decimal(6,2)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LessonUnitTestTopicQuestionId");

                    b.HasIndex("StudentId");

                    b.ToTable("LessonUnitTestTopicStudentQuestion", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AcademicYearId")
                        .HasColumnType("int");

                    b.Property<int>("GradeId")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Question1")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("Question");

                    b.Property<string>("QuestionRt")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("QuestionRT");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("GradeId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Question", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.QuestionMcqteacherAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("AnswerTextRt")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("AnswerTextRT");

                    b.Property<bool>("IsCorrectAnswer")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("SequenceNo")
                        .HasColumnType("int")
                        .HasColumnName("SequenceNO");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionMCQTeacherAnswer", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.QuestionOpenEndedTeacherAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AnswerText")
                        .HasColumnType("longtext");

                    b.Property<string>("AnswerTextRt")
                        .HasColumnType("longtext")
                        .HasColumnName("AnswerTextRT");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOpenEndedTeacherAnswer", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.QuestionStructured", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("QuestionTextRt")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("QuestionTextRT");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionStructured", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.QuestionTructuredTeacherAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AnswerText")
                        .HasColumnType("longtext");

                    b.Property<string>("AnswerTextRt")
                        .HasColumnType("longtext")
                        .HasColumnName("AnswerTextRT");

                    b.Property<int>("QuestionStructuredId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionStructuredId");

                    b.ToTable("QuestionTructuredTeacherAnswer", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.HasKey("Id");

                    b.ToTable("QuestionType", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.StudentAssessmentScore", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("AssessmentId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ActualScore")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime?>("ActualScoreEnteredOn")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("PredictedTargetScore")
                        .HasColumnType("decimal(6,2)");

                    b.Property<DateTime?>("TargetAdjustedOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TargetGeneratedOn")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("TeacherAdjustedTargetScore")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("StudentId", "AssessmentId");

                    b.HasIndex("AssessmentId");

                    b.ToTable("StudentAssessmentScore", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.StudentClass", b =>
                {
                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("RemovedDate")
                        .HasColumnType("datetime");

                    b.HasKey("ClassId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentClass", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.StudentSubjectAttendance", b =>
                {
                    b.Property<int>("SubjectAttendanceId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAttended")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("SubjectAttendanceId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentSubjectAttendance", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DepartmentHeadId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("IsBasketSubject")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Medium")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("ParentSubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentHeadId");

                    b.HasIndex("ParentSubjectId");

                    b.HasIndex(new[] { "Name" }, "UQ__Subject__737584F6FE2978E8")
                        .IsUnique();

                    b.ToTable("Subject", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.SubjectAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ActualEnteredDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ClassId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsExtraClass")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsReScheduleClass")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LessonDetails")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TimeSlotId")
                        .HasColumnType("int");

                    b.Property<string>("UsedSoftwareName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("SubjectAttendance", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.SubjectTeacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeAllocatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("SubjectTeachers");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContactNo")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmailConfirmationCode")
                        .HasColumnType("longtext");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LastLoggedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("LastModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Username" }, "UQ__User__536C85E4FCCFF6D0")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AssignedOn")
                        .HasColumnType("datetime");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Assessment", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.AcademicYear", "AcademicYear")
                        .WithMany("Assessments")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Assessment_AcademicYear");

                    b.HasOne("SchoolAttendance.Domain.Entities.User", "ApprovedByNavigation")
                        .WithMany("AssessmentApprovedByNavigations")
                        .HasForeignKey("ApprovedBy")
                        .HasConstraintName("FK_Assessment_User2");

                    b.HasOne("SchoolAttendance.Domain.Entities.AssessmentType", "AssessmentType")
                        .WithMany("Assessments")
                        .HasForeignKey("AssessmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Assessment_AssessmentType");

                    b.HasOne("SchoolAttendance.Domain.Entities.User", "CreatedBy")
                        .WithMany("AssessmentCreatedBies")
                        .HasForeignKey("CreatedById")
                        .IsRequired()
                        .HasConstraintName("FK_Assessment_User");

                    b.HasOne("SchoolAttendance.Domain.Entities.Grade", "Grade")
                        .WithMany("Assessments")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Assessment_Grade");

                    b.HasOne("SchoolAttendance.Domain.Entities.Subject", "Subject")
                        .WithMany("Assessments")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Assessment_Subject");

                    b.HasOne("SchoolAttendance.Domain.Entities.User", "UpdatedBy")
                        .WithMany("AssessmentUpdatedBies")
                        .HasForeignKey("UpdatedById")
                        .IsRequired()
                        .HasConstraintName("FK_Assessment_User1");

                    b.Navigation("AcademicYear");

                    b.Navigation("ApprovedByNavigation");

                    b.Navigation("AssessmentType");

                    b.Navigation("CreatedBy");

                    b.Navigation("Grade");

                    b.Navigation("Subject");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentClass", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Assessment", "Assessment")
                        .WithMany("AssessmentClasses")
                        .HasForeignKey("AssessmentId")
                        .IsRequired()
                        .HasConstraintName("FK_AssessmentClass_Assessment");

                    b.HasOne("SchoolAttendance.Domain.Entities.Class", "Class")
                        .WithMany("AssessmentClasses")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_AssessmentClass_Class");

                    b.Navigation("Assessment");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentClassStudent", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Assessment", "Assessment")
                        .WithMany("AssessmentClassStudents")
                        .HasForeignKey("AssessmentId")
                        .IsRequired()
                        .HasConstraintName("FK_AssessmentClassStudent_Assessment");

                    b.HasOne("SchoolAttendance.Domain.Entities.Class", "Class")
                        .WithMany("AssessmentClassStudents")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_AssessmentClassStudent_Class1");

                    b.HasOne("SchoolAttendance.Domain.Entities.User", "Student")
                        .WithMany("AssessmentClassStudents")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_AssessmentClassStudent_User");

                    b.Navigation("Assessment");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentMcqquestionStudentAnswer", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.AssessmentSectionStudentQuestion", "AssessmentSectionStudentQuestion")
                        .WithMany("AssessmentMcqquestionStudentAnswers")
                        .HasForeignKey("AssessmentSectionStudentQuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_AssessmentMCQQuestionStudentAnswer_AssessmentSectionStudentQuestion");

                    b.HasOne("SchoolAttendance.Domain.Entities.QuestionMcqteacherAnswer", "TeacherAnswer")
                        .WithMany("AssessmentMcqquestionStudentAnswers")
                        .HasForeignKey("TeacherAnswerId")
                        .IsRequired()
                        .HasConstraintName("FK_AssessmentMCQQuestionStudentAnswer_QuestionMCQTeacherAnswer");

                    b.Navigation("AssessmentSectionStudentQuestion");

                    b.Navigation("TeacherAnswer");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentOpenEndedQuestionStudentAnswer", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.AssessmentSectionStudentQuestion", "AssessmentSectionStudentQuestion")
                        .WithMany("AssessmentOpenEndedQuestionStudentAnswers")
                        .HasForeignKey("AssessmentSectionStudentQuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_AssessmentOpenEndedQuestionStudentAnswer_AssessmentSectionStudentQuestion");

                    b.Navigation("AssessmentSectionStudentQuestion");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentSection", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Assessment", "Assessment")
                        .WithMany("AssessmentSections")
                        .HasForeignKey("AssessmentId")
                        .IsRequired()
                        .HasConstraintName("FK_AssessmentSection_Assessment");

                    b.Navigation("Assessment");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentSectionQuestion", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.AssessmentSection", "AssessementSection")
                        .WithMany("AssessmentSectionQuestions")
                        .HasForeignKey("AssessementSectionId")
                        .IsRequired()
                        .HasConstraintName("FK_AssessmentSectionQuestion_AssessmentSection");

                    b.HasOne("SchoolAttendance.Domain.Entities.Question", "Question")
                        .WithMany("AssessmentSectionQuestions")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_AssessmentSectionQuestion_Question");

                    b.Navigation("AssessementSection");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentSectionStudentQuestion", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.AssessmentSectionQuestion", "AssessmentSectionQuestion")
                        .WithMany("AssessmentSectionStudentQuestions")
                        .HasForeignKey("AssessmentSectionQuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_AssessmentSectionStudentQuestion_AssessmentSectionQuestion");

                    b.HasOne("SchoolAttendance.Domain.Entities.User", "Student")
                        .WithMany("AssessmentSectionStudentQuestions")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_AssessmentSectionStudentQuestion_User");

                    b.Navigation("AssessmentSectionQuestion");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentStructuredQuestionStudentAnswer", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.AssessmentSectionStudentQuestion", "AssessmentSectionStudentQuestion")
                        .WithMany("AssessmentStructuredQuestionStudentAnswers")
                        .HasForeignKey("AssessmentSectionStudentQuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_AssessmentStructuredQuestionStudentAnswer_AssessmentSectionStudentQuestion");

                    b.HasOne("SchoolAttendance.Domain.Entities.QuestionStructured", "StructuredQuestion")
                        .WithMany("AssessmentStructuredQuestionStudentAnswers")
                        .HasForeignKey("StructuredQuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_AssessmentStructuredQuestionStudentAnswer_QuestionStructured");

                    b.Navigation("AssessmentSectionStudentQuestion");

                    b.Navigation("StructuredQuestion");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Class", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.AcademicYear", "AcademicYearNavigation")
                        .WithMany("Classes")
                        .HasForeignKey("AcademicYear")
                        .IsRequired()
                        .HasConstraintName("FK_Class_AcademicYear");

                    b.HasOne("SchoolAttendance.Domain.Entities.User", "ClassTeacher")
                        .WithMany("Classes")
                        .HasForeignKey("ClassTeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_Class_User");

                    b.HasOne("SchoolAttendance.Domain.Entities.Grade", "Grade")
                        .WithMany("Classes")
                        .HasForeignKey("GradeId")
                        .IsRequired()
                        .HasConstraintName("FK_Class_Grade");

                    b.Navigation("AcademicYearNavigation");

                    b.Navigation("ClassTeacher");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.ClassSubject", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Class", "Class")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_ClassSubject_Class");

                    b.HasOne("SchoolAttendance.Domain.Entities.Subject", "Subject")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_ClassSubject_Subject");

                    b.HasOne("SchoolAttendance.Domain.Entities.User", "SubjectTeacher")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("SubjectTeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClassSubject_User");

                    b.Navigation("Class");

                    b.Navigation("Subject");

                    b.Navigation("SubjectTeacher");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.ClassSubjectTimeTable", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Class", "Class")
                        .WithMany("ClassSubjectTimeTables")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_ClassSubjectTimeTable_Class");

                    b.HasOne("SchoolAttendance.Domain.Entities.Day", "Day")
                        .WithMany("ClassSubjectTimeTables")
                        .HasForeignKey("DayId")
                        .IsRequired()
                        .HasConstraintName("FK_ClassSubjectTimeTable_Days");

                    b.HasOne("SchoolAttendance.Domain.Entities.Subject", "Subject")
                        .WithMany("ClassSubjectTimeTables")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_ClassSubjectTimeTable_Subject");

                    b.Navigation("Class");

                    b.Navigation("Day");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Grade", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.User", "LevelHead")
                        .WithMany("Grades")
                        .HasForeignKey("LevelHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Grade_User");

                    b.Navigation("LevelHead");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.GradeSubject", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Grade", "Grade")
                        .WithMany("GradeSubjects")
                        .HasForeignKey("GradeId")
                        .IsRequired()
                        .HasConstraintName("FK_GradeSubject_Grade");

                    b.HasOne("SchoolAttendance.Domain.Entities.Subject", "Subject")
                        .WithMany("GradeSubjects")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_GradeSubject_Subject");

                    b.Navigation("Grade");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.AcademicYear", "AcademicYear")
                        .WithMany("Lessons")
                        .HasForeignKey("AcademicYearId")
                        .HasConstraintName("FK_Lesson_AcademicYear");

                    b.HasOne("SchoolAttendance.Domain.Entities.User", "CreatedBy")
                        .WithMany("LessonCreatedBies")
                        .HasForeignKey("CreatedById")
                        .IsRequired()
                        .HasConstraintName("FK_Lesson_User1");

                    b.HasOne("SchoolAttendance.Domain.Entities.Grade", "Grade")
                        .WithMany("Lessons")
                        .HasForeignKey("GradeId")
                        .HasConstraintName("FK_Lesson_Grade");

                    b.HasOne("SchoolAttendance.Domain.Entities.User", "LessonOwner")
                        .WithMany("LessonLessonOwners")
                        .HasForeignKey("LessonOwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_Lesson_User");

                    b.HasOne("SchoolAttendance.Domain.Entities.Subject", "Subject")
                        .WithMany("Lessons")
                        .HasForeignKey("SubjectId")
                        .HasConstraintName("FK_Lesson_Subject");

                    b.HasOne("SchoolAttendance.Domain.Entities.User", "UpdatedBy")
                        .WithMany("LessonUpdatedBies")
                        .HasForeignKey("UpdatedById")
                        .IsRequired()
                        .HasConstraintName("FK_Lesson_User2");

                    b.Navigation("AcademicYear");

                    b.Navigation("CreatedBy");

                    b.Navigation("Grade");

                    b.Navigation("LessonOwner");

                    b.Navigation("Subject");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonAssignedClass", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Class", "Class")
                        .WithMany("LessonAssignedClasses")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonAssignedClass_Class");

                    b.HasOne("SchoolAttendance.Domain.Entities.Lesson", "Lesson")
                        .WithMany("LessonAssignedClasses")
                        .HasForeignKey("LessonId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonAssignedClass_Lesson");

                    b.Navigation("Class");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonAssignment", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Lesson", "Lesson")
                        .WithMany("LessonAssignments")
                        .HasForeignKey("LessonId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonAssignment_Lesson");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonAssignmentStudent", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.LessonAssignment", "LessonAssignment")
                        .WithMany("LessonAssignmentStudents")
                        .HasForeignKey("LessonAssignmentId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonAssignmentStudent_LessonAssignment");

                    b.HasOne("SchoolAttendance.Domain.Entities.User", "Student")
                        .WithMany("LessonAssignmentStudents")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonAssignmentStudent_User");

                    b.Navigation("LessonAssignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonAssignmentStudentUpload", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.LessonAssignmentStudent", "LessonAssignmentStudent")
                        .WithMany("LessonAssignmentStudentUploads")
                        .HasForeignKey("LessonAssignmentStudentId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonAssignmentStudentUpload_LessonAssignmentStudent");

                    b.Navigation("LessonAssignmentStudent");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonLearningOutcome", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Lesson", "Lesson")
                        .WithMany("LessonLearningOutcomes")
                        .HasForeignKey("LessonId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonLearningOutcome_Lesson");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonLecture", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.LessonLectureContentType", "LectureContentType")
                        .WithMany("LessonLectures")
                        .HasForeignKey("LectureContentTypeId")
                        .HasConstraintName("FK_LessonLecture_LessonLectureContentType");

                    b.HasOne("SchoolAttendance.Domain.Entities.LessonTopic", "Topic")
                        .WithMany("LessonLectures")
                        .HasForeignKey("TopicId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonLecture_LessonTopic");

                    b.Navigation("LectureContentType");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonPrerequisite", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Lesson", "Lesson")
                        .WithMany("LessonPrerequisites")
                        .HasForeignKey("LessonId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonPrerequisites_Lesson");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonTopic", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Lesson", "Lesson")
                        .WithMany("LessonTopics")
                        .HasForeignKey("LessonId")
                        .HasConstraintName("FK_LessonTopic_Lesson");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonUnitTest", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Lesson", "Lesson")
                        .WithMany("LessonUnitTests")
                        .HasForeignKey("LessonId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonUnitTest_Lesson");

                    b.Navigation("Lesson");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonUnitTestTopic", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.LessonUnitTest", "LessonUnitTest")
                        .WithMany("LessonUnitTestTopics")
                        .HasForeignKey("LessonUnitTestId")
                        .HasConstraintName("FK_LessonUnitTestTopic_LessonUnitTest");

                    b.HasOne("SchoolAttendance.Domain.Entities.QuestionType", "QuestionType")
                        .WithMany("LessonUnitTestTopics")
                        .HasForeignKey("QuestionTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonUnitTestTopic_QuestionType");

                    b.Navigation("LessonUnitTest");

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonUnitTestTopicQuestion", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.LessonUnitTestTopic", "LessonUnitTestTopic")
                        .WithMany("LessonUnitTestTopicQuestions")
                        .HasForeignKey("LessonUnitTestTopicId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonUnitTestTopicQuestion_LessonUnitTestTopic");

                    b.HasOne("SchoolAttendance.Domain.Entities.Question", "Question")
                        .WithMany("LessonUnitTestTopicQuestions")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonUnitTestTopicQuestion_Question");

                    b.Navigation("LessonUnitTestTopic");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonUnitTestTopicStudentMcqquestionAnswer", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.LessonUnitTestTopicStudentQuestion", "LessonUnitTestTopicStudentQuestion")
                        .WithMany("LessonUnitTestTopicStudentMcqquestionAnswers")
                        .HasForeignKey("LessonUnitTestTopicStudentQuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonUnitTestTopicStudentMCQQuestionAnswer_LessonUnitTestTopicStudentQuestion");

                    b.HasOne("SchoolAttendance.Domain.Entities.QuestionMcqteacherAnswer", "TeacherAnswer")
                        .WithMany("LessonUnitTestTopicStudentMcqquestionAnswers")
                        .HasForeignKey("TeacherAnswerId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonUnitTestTopicStudentMCQQuestionAnswer_QuestionMCQTeacherAnswer");

                    b.Navigation("LessonUnitTestTopicStudentQuestion");

                    b.Navigation("TeacherAnswer");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonUnitTestTopicStudentOpenEndedQuestionAnswer", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.LessonUnitTestTopicStudentQuestion", "LessonUnitTestTopicStudentQuestion")
                        .WithMany("LessonUnitTestTopicStudentOpenEndedQuestionAnswers")
                        .HasForeignKey("LessonUnitTestTopicStudentQuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonUnitTestTopicStudentOpenEndedQuestionAnswer_LessonUnitTestTopicStudentQuestion");

                    b.Navigation("LessonUnitTestTopicStudentQuestion");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonUnitTestTopicStudentQuestion", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.LessonUnitTestTopicQuestion", "LessonUnitTestTopicQuestion")
                        .WithMany("LessonUnitTestTopicStudentQuestions")
                        .HasForeignKey("LessonUnitTestTopicQuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonUnitTestTopicStudentQuestion_LessonUnitTestTopicQuestion");

                    b.HasOne("SchoolAttendance.Domain.Entities.User", "Student")
                        .WithMany("LessonUnitTestTopicStudentQuestions")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_LessonUnitTestTopicStudentQuestion_User");

                    b.Navigation("LessonUnitTestTopicQuestion");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Question", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.AcademicYear", "AcademicYear")
                        .WithMany("Questions")
                        .HasForeignKey("AcademicYearId")
                        .IsRequired()
                        .HasConstraintName("FK_Question_AcademicYear");

                    b.HasOne("SchoolAttendance.Domain.Entities.Grade", "Grade")
                        .WithMany("Questions")
                        .HasForeignKey("GradeId")
                        .IsRequired()
                        .HasConstraintName("FK_Question_Grade");

                    b.HasOne("SchoolAttendance.Domain.Entities.User", "Owner")
                        .WithMany("Questions")
                        .HasForeignKey("OwnerId")
                        .IsRequired()
                        .HasConstraintName("FK_Question_User");

                    b.HasOne("SchoolAttendance.Domain.Entities.Subject", "Subject")
                        .WithMany("Questions")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Question_Subject");

                    b.Navigation("AcademicYear");

                    b.Navigation("Grade");

                    b.Navigation("Owner");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.QuestionMcqteacherAnswer", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Question", "Question")
                        .WithMany("QuestionMcqteacherAnswers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_QuestionMCQTeacherAnswer_Question");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.QuestionOpenEndedTeacherAnswer", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Question", "Question")
                        .WithMany("QuestionOpenEndedTeacherAnswers")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_QuestionOpenEndedTeacherAnswer_Question");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.QuestionStructured", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Question", "Question")
                        .WithMany("QuestionStructureds")
                        .HasForeignKey("QuestionId")
                        .IsRequired()
                        .HasConstraintName("FK_QuestionStructured_Question");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.QuestionTructuredTeacherAnswer", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.QuestionStructured", "QuestionStructured")
                        .WithMany("QuestionTructuredTeacherAnswers")
                        .HasForeignKey("QuestionStructuredId")
                        .IsRequired()
                        .HasConstraintName("FK_QuestionTructuredTeacherAnswer_QuestionStructured");

                    b.Navigation("QuestionStructured");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.StudentAssessmentScore", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Assessment", "Assessment")
                        .WithMany("StudentAssessmentScores")
                        .HasForeignKey("AssessmentId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentAssessmentTarget_Assessment");

                    b.HasOne("SchoolAttendance.Domain.Entities.User", "Student")
                        .WithMany("StudentAssessmentScores")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentAssessmentTarget_User");

                    b.Navigation("Assessment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.StudentClass", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Class", "Class")
                        .WithMany("StudentClasses")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentClass_Class");

                    b.HasOne("SchoolAttendance.Domain.Entities.User", "Student")
                        .WithMany("StudentClasses")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentClass_User");

                    b.Navigation("Class");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.StudentSubjectAttendance", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.User", "Student")
                        .WithMany("StudentSubjectAttendances")
                        .HasForeignKey("StudentId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentSubjectAttendance_User");

                    b.HasOne("SchoolAttendance.Domain.Entities.SubjectAttendance", "SubjectAttendance")
                        .WithMany("StudentSubjectAttendances")
                        .HasForeignKey("SubjectAttendanceId")
                        .IsRequired()
                        .HasConstraintName("FK_StudentSubjectAttendance_SubjectAttendance");

                    b.Navigation("Student");

                    b.Navigation("SubjectAttendance");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Subject", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.User", "DepartmentHead")
                        .WithMany("Subjects")
                        .HasForeignKey("DepartmentHeadId")
                        .HasConstraintName("FK_Subject_User");

                    b.HasOne("SchoolAttendance.Domain.Entities.Subject", "ParentSubject")
                        .WithMany("InverseParentSubject")
                        .HasForeignKey("ParentSubjectId")
                        .HasConstraintName("FK_Subject_Subject");

                    b.Navigation("DepartmentHead");

                    b.Navigation("ParentSubject");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.SubjectAttendance", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Class", "Class")
                        .WithMany("SubjectAttendances")
                        .HasForeignKey("ClassId")
                        .IsRequired()
                        .HasConstraintName("FK_Attendance_Class");

                    b.HasOne("SchoolAttendance.Domain.Entities.Subject", "Subject")
                        .WithMany("SubjectAttendances")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_Attendance_Subject");

                    b.HasOne("SchoolAttendance.Domain.Entities.ClassSubjectTimeTable", "TimeSlot")
                        .WithMany("SubjectAttendances")
                        .HasForeignKey("TimeSlotId")
                        .HasConstraintName("FK_SubjectAttendance_ClassSubjectTimeTable");

                    b.Navigation("Class");

                    b.Navigation("Subject");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.SubjectTeacher", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Subject", "Subject")
                        .WithMany("SubjectTeachers")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("FK_SubjectTeachers_Subject");

                    b.HasOne("SchoolAttendance.Domain.Entities.User", "Teacher")
                        .WithMany("SubjectTeachers")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("FK_SubjectTeachers_User");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("SchoolAttendance.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("SchoolAttendance.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AcademicYear", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Classes");

                    b.Navigation("Lessons");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Assessment", b =>
                {
                    b.Navigation("AssessmentClassStudents");

                    b.Navigation("AssessmentClasses");

                    b.Navigation("AssessmentSections");

                    b.Navigation("StudentAssessmentScores");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentSection", b =>
                {
                    b.Navigation("AssessmentSectionQuestions");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentSectionQuestion", b =>
                {
                    b.Navigation("AssessmentSectionStudentQuestions");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentSectionStudentQuestion", b =>
                {
                    b.Navigation("AssessmentMcqquestionStudentAnswers");

                    b.Navigation("AssessmentOpenEndedQuestionStudentAnswers");

                    b.Navigation("AssessmentStructuredQuestionStudentAnswers");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.AssessmentType", b =>
                {
                    b.Navigation("Assessments");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Class", b =>
                {
                    b.Navigation("AssessmentClassStudents");

                    b.Navigation("AssessmentClasses");

                    b.Navigation("ClassSubjectTimeTables");

                    b.Navigation("ClassSubjects");

                    b.Navigation("LessonAssignedClasses");

                    b.Navigation("StudentClasses");

                    b.Navigation("SubjectAttendances");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.ClassSubjectTimeTable", b =>
                {
                    b.Navigation("SubjectAttendances");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Day", b =>
                {
                    b.Navigation("ClassSubjectTimeTables");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Grade", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Classes");

                    b.Navigation("GradeSubjects");

                    b.Navigation("Lessons");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Lesson", b =>
                {
                    b.Navigation("LessonAssignedClasses");

                    b.Navigation("LessonAssignments");

                    b.Navigation("LessonLearningOutcomes");

                    b.Navigation("LessonPrerequisites");

                    b.Navigation("LessonTopics");

                    b.Navigation("LessonUnitTests");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonAssignment", b =>
                {
                    b.Navigation("LessonAssignmentStudents");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonAssignmentStudent", b =>
                {
                    b.Navigation("LessonAssignmentStudentUploads");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonLectureContentType", b =>
                {
                    b.Navigation("LessonLectures");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonTopic", b =>
                {
                    b.Navigation("LessonLectures");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonUnitTest", b =>
                {
                    b.Navigation("LessonUnitTestTopics");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonUnitTestTopic", b =>
                {
                    b.Navigation("LessonUnitTestTopicQuestions");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonUnitTestTopicQuestion", b =>
                {
                    b.Navigation("LessonUnitTestTopicStudentQuestions");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.LessonUnitTestTopicStudentQuestion", b =>
                {
                    b.Navigation("LessonUnitTestTopicStudentMcqquestionAnswers");

                    b.Navigation("LessonUnitTestTopicStudentOpenEndedQuestionAnswers");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Question", b =>
                {
                    b.Navigation("AssessmentSectionQuestions");

                    b.Navigation("LessonUnitTestTopicQuestions");

                    b.Navigation("QuestionMcqteacherAnswers");

                    b.Navigation("QuestionOpenEndedTeacherAnswers");

                    b.Navigation("QuestionStructureds");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.QuestionMcqteacherAnswer", b =>
                {
                    b.Navigation("AssessmentMcqquestionStudentAnswers");

                    b.Navigation("LessonUnitTestTopicStudentMcqquestionAnswers");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.QuestionStructured", b =>
                {
                    b.Navigation("AssessmentStructuredQuestionStudentAnswers");

                    b.Navigation("QuestionTructuredTeacherAnswers");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.QuestionType", b =>
                {
                    b.Navigation("LessonUnitTestTopics");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("ClassSubjectTimeTables");

                    b.Navigation("ClassSubjects");

                    b.Navigation("GradeSubjects");

                    b.Navigation("InverseParentSubject");

                    b.Navigation("Lessons");

                    b.Navigation("Questions");

                    b.Navigation("SubjectAttendances");

                    b.Navigation("SubjectTeachers");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.SubjectAttendance", b =>
                {
                    b.Navigation("StudentSubjectAttendances");
                });

            modelBuilder.Entity("SchoolAttendance.Domain.Entities.User", b =>
                {
                    b.Navigation("AssessmentApprovedByNavigations");

                    b.Navigation("AssessmentClassStudents");

                    b.Navigation("AssessmentCreatedBies");

                    b.Navigation("AssessmentSectionStudentQuestions");

                    b.Navigation("AssessmentUpdatedBies");

                    b.Navigation("ClassSubjects");

                    b.Navigation("Classes");

                    b.Navigation("Grades");

                    b.Navigation("LessonAssignmentStudents");

                    b.Navigation("LessonCreatedBies");

                    b.Navigation("LessonLessonOwners");

                    b.Navigation("LessonUnitTestTopicStudentQuestions");

                    b.Navigation("LessonUpdatedBies");

                    b.Navigation("Questions");

                    b.Navigation("StudentAssessmentScores");

                    b.Navigation("StudentClasses");

                    b.Navigation("StudentSubjectAttendances");

                    b.Navigation("SubjectTeachers");

                    b.Navigation("Subjects");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
